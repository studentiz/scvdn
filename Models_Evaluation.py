# -*- coding: utf-8 -*-
"""Models Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17tKUq2rWnPmePt5FyX92vTPnJrxXxQw4

# Mount Google Cloud Disk
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Install Dependency Package"""

!pip install scanpy gseapy umap-learn[plot] xgboost shap lime

"""# Import Dependency Package"""

# -*- coding: utf-8 -*-
import os
import pandas as pd
import numpy as np
import scanpy as sc
from scipy.stats import wasserstein_distance
import gc
from tqdm import tqdm
from sklearn.metrics.pairwise import cosine_similarity
import scipy.stats
import gseapy as gp
import networkx as nx
from tqdm import tqdm
import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier, VotingClassifier, RandomForestRegressor
from sklearn import metrics
import shap
shap.initjs()
from sklearn.decomposition import PCA, NMF
from sklearn.metrics import mean_squared_error, mean_poisson_deviance, precision_recall_curve, accuracy_score, balanced_accuracy_score, f1_score, confusion_matrix, precision_score, recall_score, average_precision_score
from scipy.stats import pearsonr, spearmanr, kendalltau
from sklearn import metrics
import pickle
import tensorflow as tf
import umap
import umap.plot
import lime
import lime.lime_tabular
from sklearn import svm
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix

def saveobj(obj, filepath):
    with open(filepath, 'wb') as f:
        pickle.dump(obj, f)

def loadobj(filepath):
    pkl_file = open(filepath, 'rb')
    return pickle.load(pkl_file)

WORK_DIR = "/content/drive/MyDrive/SingleCellVirus/"

"""* Image clarity
* Change the font to 'Liberation Mono'
"""

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format = 'retina'
import matplotlib.pyplot as plt
plt.rc('font',family='Liberation Mono')

"""# Check Dataset"""

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

NasalSwab

NasalSwab.obs["donor_id"].unique()

NasalSwab.obs["donor_id"]

NasalSwab.obs["Cohort_Disease_WHO_Score"].unique()

NasalSwab.obs.query("Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")

NasalSwab.obs.query("Cohort_Disease_WHO_Score=='COVID19_WHO_6-8'")

NasalSwab.var[NasalSwab.var["mvp.variable"]==True]

NasalSwab.obs["Annotation"].unique()

temp_index = NasalSwab.obs.query("Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'").index
temp_cells = NasalSwab[temp_index]
temp_index = temp_cells.obs.query("Annotation=='Ciliated Cells'").index
temp_cells = NasalSwab[temp_index]
print(temp_cells.shape[0])
print("COVID19_WHO_1-5, Ciliated Cells, SingleCell_SARSCoV2_RNA_Status, neg", temp_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'").shape[0])
print("COVID19_WHO_1-5, Ciliated Cells, SingleCell_SARSCoV2_RNA_Status, pos", temp_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'").shape[0])
print("COVID19_WHO_1-5, Ciliated Cells, SingleCell_SARSCoV2_RNA_Status, amb", temp_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'").shape[0])

"""# Each model predicts all cell types in the test set

## KNN Model Evaluation

### Training KNN
"""

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
CiliatedCells = NasalSwab[NasalSwab.obs.Annotation=="Ciliated Cells"]
# Delete NasalSwab and free memory
del NasalSwab
gc.collect()

pos_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")
neg_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")

feature_names = CiliatedCells.var.index[CiliatedCells.var["mvp.variable"]]

pos_anndata = CiliatedCells[pos_obs.index][:, feature_names]
neg_anndata = CiliatedCells[neg_obs.index][:, feature_names]

ref_pos_data = pos_anndata.X.A
ref_neg_data = neg_anndata.X.A
print("ref_pos_data shape:", ref_pos_data.shape)
print("ref_neg_data shape:", ref_neg_data.shape)

del pos_anndata, neg_anndata, pos_obs, neg_obs, feature_names
gc.collect()

train_data = np.vstack((ref_pos_data, ref_neg_data))
train_label = np.hstack((np.ones(ref_pos_data.shape[0]), np.zeros(ref_neg_data.shape[0])))

neigh = KNeighborsClassifier(n_neighbors=3)
neigh.fit(train_data, train_label)

saveobj(neigh, WORK_DIR+"KNN_model.pkl")

"""### Evaluation KNN"""

model = loadobj(WORK_DIR+"KNN_model.pkl")
results_filename = "test_knn.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "ref_from",
    "ref_celltype:", 
    "ref_pos_count",
    "ref_neg_count",
    "query_from",
    "query_celltype", 
    "query_pos_count",
    "query_neg_count",
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

threshold = 1

for query_celltype in tqdm(query_celltypes):
    query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

    pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = query_cells[pos_obs.index][:, feature_names]
    neg_anndata = query_cells[neg_obs.index][:, feature_names]

    query_pos_data = pos_anndata.X.A
    query_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    test_data = np.vstack((query_pos_data, query_neg_data))
    test_label = np.hstack((np.ones(query_pos_data.shape[0]), np.zeros(query_neg_data.shape[0])))

    if query_pos_data.shape[0]<threshold:

        results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype+("(<threshold=%s)" % (threshold))], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[-1],
            "tp":[-1],
            "fn":[-1],
            "fp":[-1],
            "F1":[-1],
            "PRE":[-1],
            "REC":[-1],
            "ACC":[-1],
            "Balanced_ACC":[-1],
            "AUC":[-1],
            "AP":[-1],
        })], axis=0, ignore_index=True)
    
        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        continue
    
    y = test_label

    pred_y = model.predict(test_data)
    pred_y = pred_y.ravel()

    tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
    acc = accuracy_score(y, pred_y)
    balanced_acc = balanced_accuracy_score(y, pred_y)
    f1 = f1_score(y, pred_y)
    precision = precision_score(y, pred_y)
    recall = recall_score(y, pred_y)
    ap = average_precision_score(y, pred_y)

    fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
    auc = metrics.auc(fpr, tpr)



    results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[tn],
            "tp":[tp],
            "fn":[fn],
            "fp":[fp],
            "F1":[f1],
            "PRE":[precision],
            "REC":[recall],
            "ACC":[acc],
            "Balanced_ACC":[balanced_acc],
            "AUC":[auc],
            "AP":[ap],
    })], axis=0, ignore_index=True)
    
    results_df.to_csv(os.path.join(WORK_DIR, results_filename))

    del query_pos_data, query_neg_data
    gc.collect()

"""## NB Model Evalution

### Training NB
"""

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
CiliatedCells = NasalSwab[NasalSwab.obs.Annotation=="Ciliated Cells"]
# 删除NasalSwab并释放内存
del NasalSwab
gc.collect()

pos_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")
neg_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")

feature_names = CiliatedCells.var.index[CiliatedCells.var["mvp.variable"]]

pos_anndata = CiliatedCells[pos_obs.index][:, feature_names]
neg_anndata = CiliatedCells[neg_obs.index][:, feature_names]

ref_pos_data = pos_anndata.X.A
ref_neg_data = neg_anndata.X.A
print("ref_pos_data shape:", ref_pos_data.shape)
print("ref_neg_data shape:", ref_neg_data.shape)

del pos_anndata, neg_anndata, pos_obs, neg_obs, feature_names
gc.collect()

train_data = np.vstack((ref_pos_data, ref_neg_data))
train_label = np.hstack((np.ones(ref_pos_data.shape[0]), np.zeros(ref_neg_data.shape[0])))

gnb = GaussianNB()
gnb.fit(train_data, train_label)

saveobj(gnb, WORK_DIR+"NB_model.pkl")

"""### Evalution NB"""

model = loadobj(WORK_DIR+"NB_model.pkl")
results_filename = "test_nb.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "ref_from",
    "ref_celltype:", 
    "ref_pos_count",
    "ref_neg_count",
    "query_from",
    "query_celltype", 
    "query_pos_count",
    "query_neg_count",
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

threshold = 1

for query_celltype in tqdm(query_celltypes):
    query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

    pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = query_cells[pos_obs.index][:, feature_names]
    neg_anndata = query_cells[neg_obs.index][:, feature_names]

    query_pos_data = pos_anndata.X.A
    query_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    test_data = np.vstack((query_pos_data, query_neg_data))
    test_label = np.hstack((np.ones(query_pos_data.shape[0]), np.zeros(query_neg_data.shape[0])))

    if query_pos_data.shape[0]<threshold:

        results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype+("(<threshold=%s)" % (threshold))], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[-1],
            "tp":[-1],
            "fn":[-1],
            "fp":[-1],
            "F1":[-1],
            "PRE":[-1],
            "REC":[-1],
            "ACC":[-1],
            "Balanced_ACC":[-1],
            "AUC":[-1],
            "AP":[-1],
        })], axis=0, ignore_index=True)
    
        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        continue
    
    y = test_label

    pred_y = model.predict(test_data)
    pred_y = pred_y.ravel()

    tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
    acc = accuracy_score(y, pred_y)
    balanced_acc = balanced_accuracy_score(y, pred_y)
    f1 = f1_score(y, pred_y)
    precision = precision_score(y, pred_y)
    recall = recall_score(y, pred_y)
    ap = average_precision_score(y, pred_y)

    fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
    auc = metrics.auc(fpr, tpr)

    results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[tn],
            "tp":[tp],
            "fn":[fn],
            "fp":[fp],
            "F1":[f1],
            "PRE":[precision],
            "REC":[recall],
            "ACC":[acc],
            "Balanced_ACC":[balanced_acc],
            "AUC":[auc],
            "AP":[ap],
    })], axis=0, ignore_index=True)
    
    results_df.to_csv(os.path.join(WORK_DIR, results_filename))

    del query_pos_data, query_neg_data
    gc.collect()

"""## SVM Model Evalution

### Training SVM
"""

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
CiliatedCells = NasalSwab[NasalSwab.obs.Annotation=="Ciliated Cells"]
# 删除NasalSwab并释放内存
del NasalSwab
gc.collect()

pos_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")
neg_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")

feature_names = CiliatedCells.var.index[CiliatedCells.var["mvp.variable"]]

pos_anndata = CiliatedCells[pos_obs.index][:, feature_names]
neg_anndata = CiliatedCells[neg_obs.index][:, feature_names]

ref_pos_data = pos_anndata.X.A
ref_neg_data = neg_anndata.X.A
print("ref_pos_data shape:", ref_pos_data.shape)
print("ref_neg_data shape:", ref_neg_data.shape)

del pos_anndata, neg_anndata, pos_obs, neg_obs, feature_names
gc.collect()

train_data = np.vstack((ref_pos_data, ref_neg_data))
train_label = np.hstack((np.ones(ref_pos_data.shape[0]), np.zeros(ref_neg_data.shape[0])))

clf = svm.SVC()
clf.fit(train_data, train_label)

saveobj(clf, WORK_DIR+"SVM_model.pkl")

"""### Evalution SVM"""

model = loadobj(WORK_DIR+"SVM_model.pkl")
results_filename = "test_svm.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "ref_from",
    "ref_celltype:", 
    "ref_pos_count",
    "ref_neg_count",
    "query_from",
    "query_celltype", 
    "query_pos_count",
    "query_neg_count",
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

threshold = 1

for query_celltype in tqdm(query_celltypes):
    query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

    pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = query_cells[pos_obs.index][:, feature_names]
    neg_anndata = query_cells[neg_obs.index][:, feature_names]

    query_pos_data = pos_anndata.X.A
    query_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    test_data = np.vstack((query_pos_data, query_neg_data))
    test_label = np.hstack((np.ones(query_pos_data.shape[0]), np.zeros(query_neg_data.shape[0])))

    if query_pos_data.shape[0]<threshold:

        results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype+("(<threshold=%s)" % (threshold))], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[-1],
            "tp":[-1],
            "fn":[-1],
            "fp":[-1],
            "F1":[-1],
            "PRE":[-1],
            "REC":[-1],
            "ACC":[-1],
            "Balanced_ACC":[-1],
            "AUC":[-1],
            "AP":[-1],
        })], axis=0, ignore_index=True)
    
        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        continue
    
    y = test_label

    pred_y = model.predict(test_data)
    pred_y = pred_y.ravel()

    tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
    acc = accuracy_score(y, pred_y)
    balanced_acc = balanced_accuracy_score(y, pred_y)
    f1 = f1_score(y, pred_y)
    precision = precision_score(y, pred_y)
    recall = recall_score(y, pred_y)
    ap = average_precision_score(y, pred_y)

    fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
    auc = metrics.auc(fpr, tpr)

    results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[tn],
            "tp":[tp],
            "fn":[fn],
            "fp":[fp],
            "F1":[f1],
            "PRE":[precision],
            "REC":[recall],
            "ACC":[acc],
            "Balanced_ACC":[balanced_acc],
            "AUC":[auc],
            "AP":[ap],
    })], axis=0, ignore_index=True)
    
    
    results_df.to_csv(os.path.join(WORK_DIR, results_filename))

    del query_pos_data, query_neg_data
    gc.collect()

"""## RF Model Evalution

### Training RF
"""

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
CiliatedCells = NasalSwab[NasalSwab.obs.Annotation=="Ciliated Cells"]
# 删除NasalSwab并释放内存
del NasalSwab
gc.collect()

pos_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")
neg_obs = CiliatedCells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg' & Cohort_Disease_WHO_Score=='COVID19_WHO_1-5'")

feature_names = CiliatedCells.var.index[CiliatedCells.var["mvp.variable"]]

pos_anndata = CiliatedCells[pos_obs.index][:, feature_names]
neg_anndata = CiliatedCells[neg_obs.index][:, feature_names]

ref_pos_data = pos_anndata.X.A
ref_neg_data = neg_anndata.X.A
print("ref_pos_data shape:", ref_pos_data.shape)
print("ref_neg_data shape:", ref_neg_data.shape)

del pos_anndata, neg_anndata, pos_obs, neg_obs, feature_names
gc.collect()

train_data = np.vstack((ref_pos_data, ref_neg_data))
train_label = np.hstack((np.ones(ref_pos_data.shape[0]), np.zeros(ref_neg_data.shape[0])))

clf = RandomForestClassifier()
clf.fit(train_data, train_label)

saveobj(clf, WORK_DIR+"RF_model.pkl")

"""### Evalution RF"""

model = loadobj(WORK_DIR+"RF_model.pkl")
results_filename = "test_rf.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "ref_from",
    "ref_celltype:", 
    "ref_pos_count",
    "ref_neg_count",
    "query_from",
    "query_celltype", 
    "query_pos_count",
    "query_neg_count",
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

threshold = 1

for query_celltype in tqdm(query_celltypes):
    query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

    pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = query_cells[pos_obs.index][:, feature_names]
    neg_anndata = query_cells[neg_obs.index][:, feature_names]

    query_pos_data = pos_anndata.X.A
    query_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    test_data = np.vstack((query_pos_data, query_neg_data))
    test_label = np.hstack((np.ones(query_pos_data.shape[0]), np.zeros(query_neg_data.shape[0])))

    if query_pos_data.shape[0]<threshold:

        results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype+("(<threshold=%s)" % (threshold))], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[-1],
            "tp":[-1],
            "fn":[-1],
            "fp":[-1],
            "F1":[-1],
            "PRE":[-1],
            "REC":[-1],
            "ACC":[-1],
            "Balanced_ACC":[-1],
            "AUC":[-1],
            "AP":[-1],
        })], axis=0, ignore_index=True)
    
        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        continue
    
    y = test_label

    pred_y = model.predict(test_data)
    pred_y = pred_y.ravel()

    tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
    acc = accuracy_score(y, pred_y)
    balanced_acc = balanced_accuracy_score(y, pred_y)
    f1 = f1_score(y, pred_y)
    precision = precision_score(y, pred_y)
    recall = recall_score(y, pred_y)
    ap = average_precision_score(y, pred_y)

    fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
    auc = metrics.auc(fpr, tpr)

    results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":["COVID19_WHO_1-5"],
            "ref_celltype:":["Ciliated Cells"], 
            "ref_pos_count":[100],
            "ref_neg_count":[1172],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":[query_celltype], 
            "query_pos_count":[query_pos_data.shape[0]],
            "query_neg_count":[query_neg_data.shape[0]],
            "tn":[tn],
            "tp":[tp],
            "fn":[fn],
            "fp":[fp],
            "F1":[f1],
            "PRE":[precision],
            "REC":[recall],
            "ACC":[acc],
            "Balanced_ACC":[balanced_acc],
            "AUC":[auc],
            "AP":[ap],
    })], axis=0, ignore_index=True)
    
    results_df.to_csv(os.path.join(WORK_DIR, results_filename))

    del query_pos_data, query_neg_data
    gc.collect()

"""## scVDN Model Evalution"""

results_filename = "test_VirusIdentifier.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

ref_Cohort_Disease_WHO_Score_label = "COVID19_WHO_1-5"
ref_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==ref_Cohort_Disease_WHO_Score_label]
# ref_celltypes = ref_cells_total.obs.Annotation.unique().to_list()
ref_celltypes = ["Ciliated Cells"]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

modelfilename = "siamese_model20230508_2.pkl"
# 加载模型
filepath = os.path.join(WORK_DIR, modelfilename)
siamese_model = loadobj(filepath)

# 结果
# results_df = pd.DataFrame(columns=[
#     "ref_from",
#     "ref_celltype:", 
#     "ref_pos_count",
#     "ref_neg_count",
#     "query_from",
#     "query_celltype", 
#     "query_pos_count",
#     "query_neg_count",
#     "AUC",
#     "Voting_AUC"
# ])

results_df = pd.DataFrame(columns=[
    "ref_from",
    "ref_celltype:", 
    "ref_pos_count",
    "ref_neg_count",
    "query_from",
    "query_celltype", 
    "query_pos_count",
    "query_neg_count",
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

# 不检测的阈值
threshold = 1

for ref_celltype in ref_celltypes:
    ref_cells = ref_cells_total[ref_cells_total.obs.Annotation==ref_celltype]

    pos_obs = ref_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = ref_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = ref_cells[pos_obs.index][:, feature_names]
    neg_anndata = ref_cells[neg_obs.index][:, feature_names]

    ref_pos_data = pos_anndata.X.A
    ref_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    if ref_pos_data.shape[0]<threshold:

        results_df = pd.concat([results_df, pd.DataFrame({
            "ref_from":[ref_Cohort_Disease_WHO_Score_label],
            "ref_celltype:":[ref_celltype+("(<threshold=%s)" % (threshold))], 
            "ref_pos_count":[ref_pos_data.shape[0]],
            "ref_neg_count":[ref_neg_data.shape[0]],
            "query_from":[query_Cohort_Disease_WHO_Score_label],
            "query_celltype":["None"], 
            "query_pos_count":[-1],
            "query_neg_count":[-1],
            "tn":[-1],
            "tp":[-1],
            "fn":[-1],
            "fp":[-1],
            "F1":[-1],
            "PRE":[-1],
            "REC":[-1],
            "ACC":[-1],
            "Balanced_ACC":[-1],
            "AUC":[-1],
            "AP":[-1]
        })], axis=0, ignore_index=True)

        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        continue

    for query_celltype in tqdm(query_celltypes):
        query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

        pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
        neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

        pos_anndata = query_cells[pos_obs.index][:, feature_names]
        neg_anndata = query_cells[neg_obs.index][:, feature_names]

        query_pos_data = pos_anndata.X.A
        query_neg_data = neg_anndata.X.A

        del pos_anndata, neg_anndata, pos_obs, neg_obs
        gc.collect()

        if query_pos_data.shape[0]<threshold:

            results_df = pd.concat([results_df, pd.DataFrame({
                "ref_from":[ref_Cohort_Disease_WHO_Score_label],
                "ref_celltype:":[ref_celltype], 
                "ref_pos_count":[ref_pos_data.shape[0]],
                "ref_neg_count":[ref_neg_data.shape[0]],
                "query_from":[query_Cohort_Disease_WHO_Score_label],
                "query_celltype":[query_celltype+("(<threshold=%s)" % (threshold))], 
                "query_pos_count":[query_pos_data.shape[0]],
                "query_neg_count":[query_neg_data.shape[0]],
                "tn":[-1],
                "tp":[-1],
                "fn":[-1],
                "fp":[-1],
                "F1":[-1],
                "PRE":[-1],
                "REC":[-1],
                "ACC":[-1],
                "Balanced_ACC":[-1],
                "AUC":[-1],
                "AP":[-1]
            })], axis=0, ignore_index=True)
        
            results_df.to_csv(os.path.join(WORK_DIR, results_filename))

            continue

        # 构造评估数据集
        test_data = []
        test_label = []
        # 参考和查询皆为正样本
        temp_count1 = ref_pos_data.shape[0]
        temp_count2 = query_pos_data.shape[0]
        for i in range(temp_count2):
            for j in range(temp_count1):
                test_data.append([ref_pos_data[j], query_pos_data[i]])
                test_label.append([1])

        # 参考为正样本和查询皆为负样本
        temp_count1 = ref_pos_data.shape[0]
        temp_count2 = query_neg_data.shape[0]
        for i in range(temp_count2):
            for j in range(temp_count1):
                test_data.append([ref_pos_data[j], query_neg_data[i]])
                test_label.append([0])

        test_data = np.array(test_data)
        test_data_right = test_data[:,0,:]
        test_data_left = test_data[:,1,:]
        
        # del test_data, ref_pos_data, ref_neg_data, query_pos_data, query_neg_data
        del test_data
        gc.collect()

        y = np.array(test_label)

        # 预测模型
        pred_y = siamese_model.predict([test_data_right, test_data_left], verbose=0)
        pred_y = pred_y.ravel()

        # 评估模型
        fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
        auc = metrics.auc(fpr, tpr)

        # 集成策略
        # 参考和查询皆为正样本
        temp_count_pos1 = ref_pos_data.shape[0]#100 #ref_pos_data.shape[0]
        temp_count_pos2 = query_pos_data.shape[0]#46 #query_pos_data.shape[0]
        new_pred_y = []
        for i in range(temp_count_pos2):
            new_pred_y.append(np.median(pred_y[i*temp_count_pos1:i*temp_count_pos1+temp_count_pos2]))

        # 参考为正样本和查询皆为负样本
        temp_count_neg1 = ref_pos_data.shape[0]#100 #ref_pos_data.shape[0]
        temp_count_neg2 = query_neg_data.shape[0]#2049 #query_neg_data.shape[0]
        for i in range(temp_count_neg2):
            new_pred_y.append(np.median(pred_y[i*temp_count_neg1+temp_count_pos1*temp_count_pos2:i*temp_count_neg1+temp_count_neg2+temp_count_pos1*temp_count_pos2]))

        new_y = np.hstack((np.ones(temp_count_pos2), np.zeros(temp_count_neg2))).astype(np.int32)

        new_pred_y = np.array(new_pred_y)

        fpr, tpr, thresholds = metrics.roc_curve(new_y, new_pred_y, pos_label=1)
        auc = metrics.auc(fpr, tpr)

        new_pred_y[new_pred_y>0.5] = 1
        new_pred_y[new_pred_y<=0.5] = 0
        new_pred_y = np.array(new_pred_y).astype(np.int32)

        # fpr, tpr, thresholds = metrics.roc_curve(new_y, new_pred_y, pos_label=1)
        # voting_auc = metrics.auc(fpr, tpr)
        y = new_y
        pred_y = new_pred_y

        tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
        acc = accuracy_score(y, pred_y)
        balanced_acc = balanced_accuracy_score(y, pred_y)
        f1 = f1_score(y, pred_y)
        precision = precision_score(y, pred_y)
        recall = recall_score(y, pred_y)
        ap = average_precision_score(y, pred_y)
        # fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
        # auc = metrics.auc(fpr, tpr)

        results_df = pd.concat([results_df, pd.DataFrame({
                "ref_from":[ref_Cohort_Disease_WHO_Score_label],
                "ref_celltype:":[ref_celltype], 
                "ref_pos_count":[ref_pos_data.shape[0]],
                "ref_neg_count":[ref_neg_data.shape[0]],
                "query_from":[query_Cohort_Disease_WHO_Score_label],
                "query_celltype":[query_celltype], 
                "query_pos_count":[query_pos_data.shape[0]],
                "query_neg_count":[query_neg_data.shape[0]],
                "tn":[tn],
                "tp":[tp],
                "fn":[fn],
                "fp":[fp],
                "F1":[f1],
                "PRE":[precision],
                "REC":[recall],
                "ACC":[acc],
                "Balanced_ACC":[balanced_acc],
                "AUC":[auc],
                "AP":[ap],
        })], axis=0, ignore_index=True)
        
        results_df.to_csv(os.path.join(WORK_DIR, results_filename))

        del query_pos_data, query_neg_data, test_data_right, test_data_left
        gc.collect()

    del ref_pos_data, ref_neg_data
    gc.collect()

del siamese_model, ref_cells_total, query_cells_total
gc.collect()

"""# Each model predicts all cells in the test set (Not distinguishing cell types)

### KNN Model Evalution
"""

model = loadobj(WORK_DIR+"KNN_model.pkl")
results_filename = "test_allcells_knn.csv"
results_pred_filename = "test_allcells_knn_pred.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_cells_total = query_cells_total[query_cells_total.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' or SingleCell_SARSCoV2_RNA_Status=='neg'").index]

test_data = query_cells_total[:, feature_names].X.A
test_label = np.zeros(query_cells_total.shape[0])
test_label[query_cells_total.obs["SingleCell_SARSCoV2_RNA_Status"]=='pos'] = 1
test_celltypes = query_cells_total.obs["Annotation"].values

del NasalSwab, query_cells_total
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

y = test_label

pred_y = model.predict(test_data)
pred_y = pred_y.ravel()

pred_df = pd.DataFrame({
    "pred":pred_y,
    "label":test_label,
    "celltype":test_celltypes
})
pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename))

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.concat([results_df, pd.DataFrame({
        "tn":[tn],
        "tp":[tp],
        "fn":[fn],
        "fp":[fp],
        "F1":[f1],
        "PRE":[precision],
        "REC":[recall],
        "ACC":[acc],
        "Balanced_ACC":[balanced_acc],
        "AUC":[auc],
        "AP":[ap],
})], axis=0, ignore_index=True)

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

gc.collect()

del model, results_df
gc.collect()

"""## NB Model Evalution"""

model = loadobj(WORK_DIR+"NB_model.pkl")
results_filename = "test_allcells_nb.csv"
results_pred_filename = "test_allcells_nb_pred.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_cells_total = query_cells_total[query_cells_total.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' or SingleCell_SARSCoV2_RNA_Status=='neg'").index]

test_data = query_cells_total[:, feature_names].X.A
test_label = np.zeros(query_cells_total.shape[0])
test_label[query_cells_total.obs["SingleCell_SARSCoV2_RNA_Status"]=='pos'] = 1
test_celltypes = query_cells_total.obs["Annotation"].values

del NasalSwab, query_cells_total
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

y = test_label

pred_y = model.predict(test_data)
pred_y = pred_y.ravel()

pred_df = pd.DataFrame({
    "pred":pred_y,
    "label":test_label,
    "celltype":test_celltypes
})
pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename))

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.concat([results_df, pd.DataFrame({
        "tn":[tn],
        "tp":[tp],
        "fn":[fn],
        "fp":[fp],
        "F1":[f1],
        "PRE":[precision],
        "REC":[recall],
        "ACC":[acc],
        "Balanced_ACC":[balanced_acc],
        "AUC":[auc],
        "AP":[ap],
})], axis=0, ignore_index=True)

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

gc.collect()

del model, results_df
gc.collect()

"""## SVM Model Evalution"""

model = loadobj(WORK_DIR+"SVM_model.pkl")
results_filename = "test_allcells_svm.csv"
results_pred_filename = "test_allcells_svm_pred.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_cells_total = query_cells_total[query_cells_total.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' or SingleCell_SARSCoV2_RNA_Status=='neg'").index]

test_data = query_cells_total[:, feature_names].X.A
test_label = np.zeros(query_cells_total.shape[0])
test_label[query_cells_total.obs["SingleCell_SARSCoV2_RNA_Status"]=='pos'] = 1
test_celltypes = query_cells_total.obs["Annotation"].values

del NasalSwab, query_cells_total
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

y = test_label

pred_y = model.predict(test_data)
pred_y = pred_y.ravel()

pred_df = pd.DataFrame({
    "pred":pred_y,
    "label":test_label,
    "celltype":test_celltypes
})
pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename))

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.concat([results_df, pd.DataFrame({
        "tn":[tn],
        "tp":[tp],
        "fn":[fn],
        "fp":[fp],
        "F1":[f1],
        "PRE":[precision],
        "REC":[recall],
        "ACC":[acc],
        "Balanced_ACC":[balanced_acc],
        "AUC":[auc],
        "AP":[ap],
})], axis=0, ignore_index=True)

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

gc.collect()

del model, results_df
gc.collect()

"""## RF Model Evalution"""

model = loadobj(WORK_DIR+"RF_model.pkl")
results_filename = "test_allcells_rf.csv"
results_pred_filename = "test_allcells_rf_pred.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")
feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_cells_total = query_cells_total[query_cells_total.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos' or SingleCell_SARSCoV2_RNA_Status=='neg'").index]

test_data = query_cells_total[:, feature_names].X.A
test_label = np.zeros(query_cells_total.shape[0])
test_label[query_cells_total.obs["SingleCell_SARSCoV2_RNA_Status"]=='pos'] = 1
test_celltypes = query_cells_total.obs["Annotation"].values

# del NasalSwab, query_cells_total
gc.collect()

# 结果
results_df = pd.DataFrame(columns=[
    "tn",
    "tp",
    "fn",
    "fp",
    "F1",
    "PRE",
    "REC",
    "ACC",
    "Balanced_ACC",
    "AUC",
    "AP",
])

y = test_label

pred_y = model.predict(test_data)
pred_y = pred_y.ravel()

pred_df = pd.DataFrame({
    "pred":pred_y,
    "label":test_label,
    "celltype":test_celltypes
})
pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename))

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.concat([results_df, pd.DataFrame({
        "tn":[tn],
        "tp":[tp],
        "fn":[fn],
        "fp":[fp],
        "F1":[f1],
        "PRE":[precision],
        "REC":[recall],
        "ACC":[acc],
        "Balanced_ACC":[balanced_acc],
        "AUC":[auc],
        "AP":[ap],
})], axis=0, ignore_index=True)

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

del model, results_df
gc.collect()

"""## scVDN Model Evalution"""

results_filename = "test_VirusIdentifier.csv"
results_pred_filename = "test_allcells_pred_scVDN.csv"

NasalSwab = sc.read_h5ad("/content/drive/MyDrive/SingleCellVirus/Datasets/20210217_NasalSwab_Broad_BCH_UMMC_to_CZI.h5ad")

ref_Cohort_Disease_WHO_Score_label = "COVID19_WHO_1-5"
ref_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==ref_Cohort_Disease_WHO_Score_label]
ref_celltypes = ["Ciliated Cells"]

query_Cohort_Disease_WHO_Score_label = "COVID19_WHO_6-8"
query_cells_total = NasalSwab[NasalSwab.obs.Cohort_Disease_WHO_Score==query_Cohort_Disease_WHO_Score_label]
query_celltypes = query_cells_total.obs.Annotation.unique().to_list()

feature_names = NasalSwab.var.index[NasalSwab.var["mvp.variable"]]

del NasalSwab
gc.collect()

modelfilename = "siamese_model20230508_2.pkl"
# 加载模型
filepath = os.path.join(WORK_DIR, modelfilename)
siamese_model = loadobj(filepath)

# 预测结果的文件
# 需要先存一个空csv文件
pred_df = pd.DataFrame({
    "pred":[],
    "label":[],
    "celltype":[]
})
pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename), index=None)

# 不检测的阈值
threshold = 1

for ref_celltype in ref_celltypes:
    ref_cells = ref_cells_total[ref_cells_total.obs.Annotation==ref_celltype]

    pos_obs = ref_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
    neg_obs = ref_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

    pos_anndata = ref_cells[pos_obs.index][:, feature_names]
    neg_anndata = ref_cells[neg_obs.index][:, feature_names]

    ref_pos_data = pos_anndata.X.A
    ref_neg_data = neg_anndata.X.A

    del pos_anndata, neg_anndata, pos_obs, neg_obs
    gc.collect()

    for query_celltype in tqdm(query_celltypes):
        query_cells = query_cells_total[query_cells_total.obs.Annotation==query_celltype]

        pos_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='pos'")
        neg_obs = query_cells.obs.query("SingleCell_SARSCoV2_RNA_Status=='neg'")

        pos_anndata = query_cells[pos_obs.index][:, feature_names]
        neg_anndata = query_cells[neg_obs.index][:, feature_names]

        query_pos_data = pos_anndata.X.A
        query_neg_data = neg_anndata.X.A

        del pos_anndata, neg_anndata, pos_obs, neg_obs
        gc.collect()

        # 构造评估数据集
        test_data = []
        test_label = []
        # 参考和查询皆为正样本
        temp_count1 = ref_pos_data.shape[0]
        temp_count2 = query_pos_data.shape[0]
        for i in range(temp_count2):
            for j in range(temp_count1):
                test_data.append([ref_pos_data[j], query_pos_data[i]])
                test_label.append([1])

        # 参考为正样本和查询皆为负样本
        temp_count1 = ref_pos_data.shape[0]
        temp_count2 = query_neg_data.shape[0]
        for i in range(temp_count2):
            for j in range(temp_count1):
                test_data.append([ref_pos_data[j], query_neg_data[i]])
                test_label.append([0])

        test_data = np.array(test_data)
        test_data_right = test_data[:,0,:]
        test_data_left = test_data[:,1,:]
        
        # del test_data, ref_pos_data, ref_neg_data, query_pos_data, query_neg_data
        del test_data
        gc.collect()

        y = np.array(test_label).reshape(-1)

        # 预测模型
        pred_y = siamese_model.predict([test_data_right, test_data_left], verbose=0)
        pred_y = pred_y.ravel()

        pred_df = pd.read_csv(os.path.join(WORK_DIR, results_pred_filename))

        pred_df = pd.concat([pred_df, pd.DataFrame({
            "pred":pred_y,
            "label":y,
            "celltype":[query_celltype]*pred_y.shape[0]
        })], axis=0, ignore_index=True)

        pred_df.to_csv(os.path.join(WORK_DIR, results_pred_filename), index=None)

del siamese_model, ref_cells_total, query_cells_total
gc.collect()

results_pred_filename = "test_allcells_pred_scVDN.csv"
results_filename = "test_allcells_scVND.csv"

pred_df = pd.read_csv(os.path.join(WORK_DIR, results_pred_filename))

y = pred_df["label"].values
pred_y = pred_df["pred"].values    

pred_y[pred_y>0.5] = 1
pred_y[pred_y<=0.5] = 0

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.DataFrame({
    "tn":[tn],
    "tp":[tp],
    "fn":[fn],
    "fp":[fp],
    "F1":[f1],
    "PRE":[precision],
    "REC":[recall],
    "ACC":[acc],
    "Balanced_ACC":[balanced_acc],
    "AUC":[auc],
    "AP":[ap],
})

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

results_df

results_pred_filename = "test_allcells_pred_scVDN.csv"
results_filename = "test_allcells_voting_scVND.csv"

pred_df = pd.read_csv(os.path.join(WORK_DIR, results_pred_filename))

y = pred_df["label"].values
pred_y = pred_df["pred"].values

data_count = y.shape[0]
ref_data_count = 100
ensemble_data_count = int(data_count/ref_data_count)

ensemble_y = np.zeros(int(data_count/ref_data_count))
ensemble_pred_y = np.zeros(int(data_count/ref_data_count))

for i in range(ensemble_data_count):
    ensemble_y[i] = np.mean(y[i*ref_data_count: (i+1)*ref_data_count])
    ensemble_pred_y[i] = np.mean(pred_y[i*ref_data_count: (i+1)*ref_data_count])

y = ensemble_y
pred_y = ensemble_pred_y

pred_y[pred_y>0.5] = 1
pred_y[pred_y<=0.5] = 0

tn, fp, fn, tp = confusion_matrix(y, pred_y).ravel()
acc = accuracy_score(y, pred_y)
balanced_acc = balanced_accuracy_score(y, pred_y)
f1 = f1_score(y, pred_y)
precision = precision_score(y, pred_y)
recall = recall_score(y, pred_y)
ap = average_precision_score(y, pred_y)

fpr, tpr, thresholds = metrics.roc_curve(y, pred_y, pos_label=1)
auc = metrics.auc(fpr, tpr)

results_df = pd.DataFrame({
    "tn":[tn],
    "tp":[tp],
    "fn":[fn],
    "fp":[fp],
    "F1":[f1],
    "PRE":[precision],
    "REC":[recall],
    "ACC":[acc],
    "Balanced_ACC":[balanced_acc],
    "AUC":[auc],
    "AP":[ap],
})

results_df.to_csv(os.path.join(WORK_DIR, results_filename))

results_df